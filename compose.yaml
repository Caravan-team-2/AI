# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  ai:
    build:
      context: .
      dockerfile: ai/Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.ai.rule=PathPrefix(`/ai`)
      - traefik.http.routers.ai.entrypoints=web
      - traefik.http.services.ai.loadbalancer.server.port=8000
      - traefik.http.middlewares.strip-ai.stripPrefix.prefixes=/ai
      - traefik.http.routers.ai.middlewares=strip-ai


  fraud:
    build:
      context: .
      dockerfile: fraud/Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.fraud.rule=PathPrefix(`/fraud`)
      - traefik.http.routers.fraud.entrypoints=web
      - traefik.http.services.fraud.loadbalancer.server.port=8001
      - traefik.http.middlewares.strip-fraud.stripPrefix.prefixes=/fraud
      - traefik.http.routers.fraud.middlewares=strip-fraud
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=10.103.44.199:19092
      - KAFKA_REST_URL=http://10.103.44.199:8080

  traefik:
    image: traefik:v3.0
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  qdrant:
    image: qdrant/qdrant:v1.10.0
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HTTP_PORT=6333
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_data:/qdrant/storage


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  qdrant_data:
# secrets:
#   db-password:
#     file: db/password.txt

